{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OGC \u00b6 ogc - provisioning, that\u2019s it. Getting Started \u00b6 Welcome to the getting started guide! This should be a quick introduction to get up and running with OGC. More information on customizing and extending OGC can be found in the user documentation. Setup \u00b6 OGC requires Redis and Postgres to function. The easiest way to fulfill these requirements is with docker-compose : version : \"3.9\" services : redis : image : \"redis:6.2-alpine\" restart : always volumes : - \"redis:/data\" ports : - '6379:6379' postgres : image : postgres:11 environment : - POSTGRES_DB=ogc - POSTGRES_USER=postgres - POSTGRES_PASSWORD=postgres healthcheck : test : [ \"CMD\" , \"pg_isready\" , \"-U\" , \"postgres\" ] retries : 300 interval : 1s ports : - '5432:5432' volumes : redis : {} Next , is installation of OGC. We use poetry : $ pip install poetry == 1 .1.12 $ poetry install Create a provision specification \u00b6 Once setup is complete, a provision specification is needed. This defines ssh keys and one or more layouts to be provisioned. name : ci # SSH Keys must be passwordless ssh-keys : public : ~/.ssh/id_rsa_libcloud.pub private : ~/.ssh/id_rsa_libcloud layouts : elastic-agent-sles : runs-on : sles-15 instance-size : e2-standard-8 username : root scripts : fixtures/ex_deploy_sles provider : google scale : 5 remote-path : /root/ogc include : - .ogc-cache exclude : - .git - .venv artifacts : /root/output/*.xml tags : - elastic-agent-8.1.x - sles-gcp This specification tells OGC to deploy 5 nodes running on Google\u2019s e2-standard-8 with SUSE 15 OS. The scripts section tells OGC where the template files/scripts are located that need to be uploaded to each node during the deployment phase.","title":"Getting-Started"},{"location":"#ogc","text":"ogc - provisioning, that\u2019s it.","title":"OGC"},{"location":"#getting-started","text":"Welcome to the getting started guide! This should be a quick introduction to get up and running with OGC. More information on customizing and extending OGC can be found in the user documentation.","title":"Getting Started"},{"location":"#setup","text":"OGC requires Redis and Postgres to function. The easiest way to fulfill these requirements is with docker-compose : version : \"3.9\" services : redis : image : \"redis:6.2-alpine\" restart : always volumes : - \"redis:/data\" ports : - '6379:6379' postgres : image : postgres:11 environment : - POSTGRES_DB=ogc - POSTGRES_USER=postgres - POSTGRES_PASSWORD=postgres healthcheck : test : [ \"CMD\" , \"pg_isready\" , \"-U\" , \"postgres\" ] retries : 300 interval : 1s ports : - '5432:5432' volumes : redis : {} Next , is installation of OGC. We use poetry : $ pip install poetry == 1 .1.12 $ poetry install","title":"Setup"},{"location":"#create-a-provision-specification","text":"Once setup is complete, a provision specification is needed. This defines ssh keys and one or more layouts to be provisioned. name : ci # SSH Keys must be passwordless ssh-keys : public : ~/.ssh/id_rsa_libcloud.pub private : ~/.ssh/id_rsa_libcloud layouts : elastic-agent-sles : runs-on : sles-15 instance-size : e2-standard-8 username : root scripts : fixtures/ex_deploy_sles provider : google scale : 5 remote-path : /root/ogc include : - .ogc-cache exclude : - .git - .venv artifacts : /root/output/*.xml tags : - elastic-agent-8.1.x - sles-gcp This specification tells OGC to deploy 5 nodes running on Google\u2019s e2-standard-8 with SUSE 15 OS. The scripts section tells OGC where the template files/scripts are located that need to be uploaded to each node during the deployment phase.","title":"Create a provision specification"}]}