{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OGC","text":"<p>ogc - provisioning, that's it.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Welcome to the getting started guide! This should be a quick introduction to get up and running with OGC. More information on customizing and extending OGC can be found in the user documentation.</p>"},{"location":"#install","title":"Install","text":""},{"location":"#recommended","title":"Recommended","text":"bash -c<pre><code>docker run \\\n--env-file .env \\\n--rm \\\n--volumes-from gcloud-config \\\n-v ssh-creds:/root/.ssh \\\n-v `pwd`:`pwd` \\\n-w `pwd` \\\n-it gorambo/ogc:v4 \\\nogc ubuntu.py up -v\n</code></pre> SSH/GCE/Docker Authentication <p>A couple of articles to help setup ssh/gce authentication for use within docker.</p> <ul> <li>OGC+Docker+GCE </li> <li>OGC+Docker+SSH</li> </ul>"},{"location":"#alternatives","title":"Alternatives","text":"<p>We use and recommend the use of Poetry:</p> <pre><code>$ pip install poetry\n$ poetry install\n</code></pre> Running in Poetry <p>If using poetry make sure to prefix running of <code>ogc</code> with the following:</p> <pre><code>$ poetry run ogc\n</code></pre> <p>Optionally, load up the virtualenv beforehand:</p> <pre><code>$ poetry shell\n</code></pre>"},{"location":"#provider-setup","title":"Provider Setup","text":"<p>OGC currently supports AWS and GCP out of the box (more added soon). In order for OGC to connect and deploy to these clouds a few environment variables are needed. </p> <p>Create a <code>.env</code> file in the top level directory where <code>ogc</code> is to be run:</p> <pre><code>AWS_ACCESS_KEY_ID=\"\"\nAWS_SECRET_ACCESS_KEY=\"\"\nAWS_REGION=\"us-east-2\"\n\nGOOGLE_APPLICATION_CREDENTIALS=\"svc.json\"\nGOOGLE_APPLICATION_SERVICE_ACCOUNT=\"..@...iam.gserviceaccount.com\"\nGOOGLE_PROJECT=\"example-project\"\nGOOGLE_DATACENTER=\"us-central1-a\"\n</code></pre> Additional Provider Information <p>More information can be found in our Providers documentation.</p>"},{"location":"#define-provisioning","title":"Define Provisioning","text":"<p>Once configuration is complete, a provision layout is needed, create the following:</p> ubuntu.py<pre><code>from ogc import init, fs\ndeployment = init(\nlayout_model=dict(\ninstance_size=\"e2-standard-4\",\nname=\"ubuntu-ogc\",\nprovider=\"google\",\nremote_path=\"/home/ubuntu/ogc\",\nruns_on=\"ubuntu-2004-lts\",\nscale=5,\nscripts=\"fixtures/ex_deploy_ubuntu\",\nusername=\"ubuntu\",\nssh_private_key=fs.expand_path(\"~/.ssh/id_rsa_libcloud\"),\nssh_public_key=fs.expand_path(\"~/.ssh/id_rsa_libcloud.pub\"),\nports=[\"22:22\", \"80:80\", \"443:443\", \"5601:5601\"],\ntags=[],\nlabels=dict(\ndivision=\"engineering\", org=\"obs\", team=\"observability\", project=\"perf\"\n),\n),\n)\n</code></pre> <p>This specification tells OGC to deploy 5 nodes running on Google's e2-standard-4 with Ubuntu OS.  The <code>scripts</code> section tells OGC where the template files/scripts are located that need to be uploaded to each node during the deployment phase.</p>"},{"location":"#provision-and-deploy","title":"Provision and Deploy","text":"<p>Once the specification is set, environment variables configured, execute a deployment in a new terminal:</p>"},{"location":"#bring-up","title":"Bring up","text":"bash -c<pre><code>docker run \\\n--env-file .env \\\n--rm \\\n--volumes-from gcloud-config \\\n-v ssh-creds:/root/.ssh \\\n-v `pwd`:`pwd` \\\n-w `pwd` \\\n-it gorambo/ogc:v4 \\\nogc ubuntu.py up -v\n</code></pre>"},{"location":"#execute-commands","title":"Execute commands","text":"bash -c<pre><code>docker run \\\n--env-file .env \\\n--rm \\\n--volumes-from gcloud-config \\\n-v ssh-creds:/root/.ssh \\\n-v `pwd`:`pwd` \\\n-w `pwd` \\\n-it gorambo/ogc:v4 \\\nogc ubuntu.py exec -v -o cmd='sudo apt-get update &amp;&amp; sudo apt-get dist-upgrade'\n</code></pre>"},{"location":"#bring-down","title":"Bring down","text":"bash -c<pre><code>docker run \\\n--env-file .env \\\n--rm \\\n--volumes-from gcloud-config \\\n-v ssh-creds:/root/.ssh \\\n-v `pwd`:`pwd` \\\n-w `pwd` \\\n-it gorambo/ogc:v4 \\\nogc ubuntu.py down -v\n</code></pre>"},{"location":"#next-steps","title":"Next steps","text":"<p>Learn how to manage your deployments in our User Guide - Managing a deployment</p>"},{"location":"commands/ogc/","title":"CLI Reference","text":"<p>This page provides documentation for our command line tool.</p>"},{"location":"developer-guide/managing-nodes/","title":"Managing Nodes Programatically","text":""},{"location":"developer-guide/managing-nodes/#requirements","title":"Requirements","text":"<p>Accessing the functionality of OGC programatically requires that both cloud credentials and database access are configured. The environment variables for working with AWS or Google should be defined in your environment either by setting it in the <code>.env</code> or in the abscence of a dotenv file they can be exported by your current running shell.</p> <pre><code>GOOGLE_APPLICATION_CREDENTIALS=\"mycreds.json\"\nGOOGLE_APPLICATION_SERVICE_ACCOUNT=\"bob@whodunit.iam.gserviceaccount.com\"\nGOOGLE_PROJECT=\"my-awesome-project\"\nGOOGLE_DATACENTER=\"us-central1-a\"\n</code></pre> Authentication Information <p>Please read Docker and Google Authentication for more information.</p>"},{"location":"developer-guide/managing-nodes/#launch-node","title":"Launch Node","text":"<p>Once the database is setup in your code, you are ready to begin creating and managing nodes.</p> <p>To launch a node an OGC specification is required with at least one layout defined, create a file called <code>ubuntu.py</code>.</p> <pre><code>from ogc.deployer import init\nfrom ogc.fs import expand_path\nfrom ogc.log import get_logger\nlog = get_logger(\"ogc\")\ndeployment = init(\nlayout_model=dict(\ninstance_size=\"e2-standard-4\",\nname=\"ubuntu-ogc\",\nprovider=\"google\",\nremote_path=\"/home/ubuntu/ogc\",\nruns_on=\"ubuntu-2004-lts\",\nscale=5,\nscripts=\"fixtures/ex_deploy_ubuntu\",\nusername=\"ubuntu\",\nssh_private_key=expand_path(\"~/.ssh/id_rsa_libcloud\"),\nssh_public_key=expand_path(\"~/.ssh/id_rsa_libcloud.pub\"),\nports=[\"22:22\", \"80:80\", \"443:443\", \"5601:5601\"],\ntags=[],\nlabels=dict(\ndivision=\"engineering\", org=\"obs\", team=\"observability\", project=\"perf\"\n),\n),\n)\n</code></pre> <p>To launch this node layout:</p> bash -c<pre><code>docker run \\\n--env-file .env \\\n--rm \\\n--volumes-from gcloud-config \\\n-v ssh-creds:/root/.ssh \\\n-v `pwd`:`pwd` \\\n-w `pwd` \\\n-it gorambo/ogc:v4 \\\nogc ubuntu.py up -v\n</code></pre>"},{"location":"developer-guide/api/db/","title":"API","text":""},{"location":"developer-guide/api/db/#ogc.db.log","title":"log  <code>module-attribute</code>","text":"<pre><code>log = get_logger('ogc')\n</code></pre>"},{"location":"developer-guide/api/db/#ogc.db.model_as_pickle","title":"model_as_pickle","text":"<pre><code>model_as_pickle(obj: object) -&gt; bytes\n</code></pre> <p>Converts model object to bytes</p> Source code in <code>ogc/db.py</code> <pre><code>def model_as_pickle(obj: object) -&gt; bytes:\n\"\"\"Converts model object to bytes\"\"\"\noutput: bytes = dill.dumps(obj)\nreturn output\n</code></pre>"},{"location":"developer-guide/api/db/#ogc.db.pickle_to_model","title":"pickle_to_model","text":"<pre><code>pickle_to_model(obj: bytes) -&gt; t.Any\n</code></pre> <p>Converts pickled bytes to object</p> Source code in <code>ogc/db.py</code> <pre><code>def pickle_to_model(obj: bytes) -&gt; t.Any:\n\"\"\"Converts pickled bytes to object\"\"\"\nreturn dill.loads(obj)\n</code></pre>"},{"location":"developer-guide/api/db/#ogc.db.connect","title":"connect","text":"<pre><code>connect() -&gt; SqliteExtDatabase\n</code></pre> <p>Get the associated database file</p> <p>Returns:</p> Type Description <code>SqliteExtDatabase</code> <p>Connection to sqlite database</p> Source code in <code>ogc/db.py</code> <pre><code>def connect() -&gt; SqliteExtDatabase:\n\"\"\"Get the associated database file\n    Returns:\n        Connection to sqlite database\n    \"\"\"\np = Path(__file__).cwd() / \".ogc-cache\"\np.mkdir(parents=True, exist_ok=True)\nreturn SqliteExtDatabase(\nstr(p / \"data.db\"), pragmas=((\"journal_mode\", \"wal\"), (\"foreign_keys\", 1))\n)\n</code></pre>"},{"location":"developer-guide/api/db/#ogc.db.cache_path","title":"cache_path","text":"<pre><code>cache_path() -&gt; Path\n</code></pre> <p>Returns where to store files</p> Source code in <code>ogc/db.py</code> <pre><code>def cache_path() -&gt; Path:\n\"\"\"Returns where to store files\"\"\"\np = Path(__file__).cwd() / \".ogc-cache/nodes\"\np.mkdir(parents=True, exist_ok=True)\nreturn p\n</code></pre>"},{"location":"developer-guide/api/deployer/","title":"API","text":""},{"location":"developer-guide/api/deployer/#ogc.deployer.MAX_WORKERS","title":"MAX_WORKERS  <code>module-attribute</code>","text":"<pre><code>MAX_WORKERS = int(\nos.environ.get(\"OGC_MAX_WORKERS\", cpu_count() - 1)\n)\n</code></pre>"},{"location":"developer-guide/api/deployer/#ogc.deployer.log","title":"log  <code>module-attribute</code>","text":"<pre><code>log = get_logger('ogc')\n</code></pre>"},{"location":"developer-guide/api/deployer/#ogc.deployer.init","title":"init  <code>module-attribute</code>","text":"<pre><code>init = partial(_init)\n</code></pre>"},{"location":"developer-guide/api/deployer/#ogc.deployer.Ctx","title":"Ctx","text":"<p>Typed mapping of the context options passed into a rendered template</p>"},{"location":"developer-guide/api/deployer/#ogc.deployer.Ctx.env","title":"env  <code>class-attribute</code>","text":"<pre><code>env: t.Required[dict]\n</code></pre>"},{"location":"developer-guide/api/deployer/#ogc.deployer.Ctx.node","title":"node  <code>class-attribute</code>","text":"<pre><code>node: t.Required[MachineModel]\n</code></pre>"},{"location":"developer-guide/api/deployer/#ogc.deployer.Ctx.nodes","title":"nodes  <code>class-attribute</code>","text":"<pre><code>nodes: t.Required[t.Any]\n</code></pre>"},{"location":"developer-guide/api/deployer/#ogc.deployer.MachineOpts","title":"MachineOpts","text":"<p>Applicable options to filter machines by</p> Example <pre><code>ogc fixtures/layout/ubuntu exec -v -o cmd='hostname -i' -o instance_name=ogc-ubuntu-ogc-a19a-004\n</code></pre>"},{"location":"developer-guide/api/deployer/#ogc.deployer.MachineOpts.instance_id","title":"instance_id  <code>class-attribute</code>","text":"<pre><code>instance_id: t.NotRequired[str]\n</code></pre>"},{"location":"developer-guide/api/deployer/#ogc.deployer.MachineOpts.instance_name","title":"instance_name  <code>class-attribute</code>","text":"<pre><code>instance_name: t.NotRequired[str]\n</code></pre>"},{"location":"developer-guide/api/deployer/#ogc.deployer.MachineOpts.limit","title":"limit  <code>class-attribute</code>","text":"<pre><code>limit: t.NotRequired[int]\n</code></pre>"},{"location":"developer-guide/api/deployer/#ogc.deployer.render","title":"render","text":"<pre><code>render(template: Path, context: Ctx) -&gt; str\n</code></pre> <p>Returns the correct deployment based on type of step</p> <p>Parameters:</p> Name Type Description Default <code>template</code> <code>Path</code> <p>path to template file</p> required <code>context</code> <code>Ctx</code> <p>mapping of key,value to expose in template</p> required <p>Returns:</p> Type Description <code>str</code> <p>Rendered template string</p> Source code in <code>ogc/deployer.py</code> <pre><code>def render(template: Path, context: Ctx) -&gt; str:\n\"\"\"Returns the correct deployment based on type of step\n    Args:\n        template: path to template file\n        context: mapping of key,value to expose in template\n    Returns:\n        Rendered template string\n    \"\"\"\nfpath = template.absolute()\nlookup = TemplateLookup(\ndirectories=[\nstr(template.parent.absolute()),\nstr(template.parent.parent.absolute()),\n]\n)\n_template = Template(filename=str(fpath), lookup=lookup)\nreturn str(_template.render(**context))\n</code></pre>"},{"location":"developer-guide/api/deployer/#ogc.deployer.__filter_machines","title":"__filter_machines","text":"<pre><code>__filter_machines(\n**kwargs: MachineOpts,\n) -&gt; list[MachineModel]\n</code></pre> <p>Filters machines by instance_id or all if none is provided</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>MachineOpts</code> <p>Machine filter options</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[MachineModel]</code> <p>List of machines</p> Source code in <code>ogc/deployer.py</code> <pre><code>def __filter_machines(**kwargs: MachineOpts) -&gt; list[MachineModel]:\n\"\"\"Filters machines by instance_id or all if none is provided\n    Args:\n        kwargs: Machine filter options\n    Returns:\n        List of machines\n    \"\"\"\nreturn t.cast(\nlist[MachineModel],\npmatch(\nkwargs,\n{\"instance_id\": _},\nlambda x: [MachineModel.get_or_none(MachineModel.instance_id == x)],\n{\"instance_name\": _},\nlambda x: [MachineModel.get_or_none(MachineModel.instance_name == x)],\n{\"limit\": _},\nlambda x: [node for node in MachineModel.select().limit(x)],\n_,\n[node for node in MachineModel.select()],\n),\n)\n</code></pre>"},{"location":"developer-guide/api/deployer/#ogc.deployer.ssh","title":"ssh","text":"<pre><code>ssh(\nprovisioner: BaseProvisioner, **kwargs: MachineOpts\n) -&gt; None\n</code></pre> <p>Opens SSH connection to a machine</p> <p>Pass in a mapping of options to filter machines, a single machine must be queried</p> <p>Parameters:</p> Name Type Description Default <code>provisioner</code> <code>BaseProvisioner</code> <p>provisioner</p> required <code>kwargs</code> <code>MachineOpts</code> <p>Mapping of options to pass to <code>ssh</code></p> <code>{}</code> Example <pre><code>&gt; ogc ubuntu.py ssh -v -o instance_id=5407368969918077947\n</code></pre> Source code in <code>ogc/deployer.py</code> <pre><code>@signals.ssh.connect\ndef ssh(provisioner: BaseProvisioner, **kwargs: MachineOpts) -&gt; None:\n\"\"\"Opens SSH connection to a machine\n    Pass in a mapping of options to filter machines, a single machine\n    must be queried\n    Args:\n        provisioner: provisioner\n        kwargs: Mapping of options to pass to `ssh`\n    Example:\n        ``` bash\n        &gt; ogc ubuntu.py ssh -v -o instance_id=5407368969918077947\n        ```\n    \"\"\"\nnodes = __filter_machines(**kwargs)\nif nodes:\nmachine = nodes[0]\nif machine:\ncmd = [\n\"-o\",\n\"StrictHostKeyChecking=no\",\n\"-o\",\n\"UserKnownHostsFile=/dev/null\",\n\"-i\",\nPath(machine.layout.ssh_private_key).expanduser(),\nf\"{machine.layout.username}@{machine.public_ip}\",\n]\nsh.ssh(cmd, _fg=True, _env=os.environ.copy())  # type: ignore\nsys.exit(0)\nlog.error(\"Could not find machine to ssh to\")\nsys.exit(1)\n</code></pre>"},{"location":"developer-guide/api/deployer/#ogc.deployer.up","title":"up","text":"<pre><code>up(\nprovisioner: BaseProvisioner, **kwargs: MachineOpts\n) -&gt; bool\n</code></pre> <p>Bring up machines</p> <p>Parameters:</p> Name Type Description Default <code>provisioner</code> <code>BaseProvisioner</code> <p>provisioner</p> required <code>kwargs</code> <code>MachineOpts</code> <p>Mapping of options to pass to <code>up</code></p> <code>{}</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>ogc/deployer.py</code> <pre><code>@signals.up.connect\ndef up(provisioner: BaseProvisioner, **kwargs: MachineOpts) -&gt; bool:\n\"\"\"Bring up machines\n    Args:\n        provisioner: provisioner\n        kwargs: Mapping of options to pass to `up`\n    Returns:\n        True if successful, False otherwise.\n    \"\"\"\nlog.info(\"Bringing up machines\")\nprovisioner.setup()\nprovisioner.create()\nreturn True\n</code></pre>"},{"location":"developer-guide/api/deployer/#ogc.deployer.down","title":"down","text":"<pre><code>down(\nprovisioner: BaseProvisioner, **kwargs: MachineOpts\n) -&gt; bool\n</code></pre> <p>Tear down machines</p> <p>Pass in a optional mapping of options to filter machines</p> <p>Parameters:</p> Name Type Description Default <code>provisioner</code> <code>BaseProvisioner</code> <p>Provisioner</p> required <code>kwargs</code> <code>MachineOpts</code> <p>Mapping of options to pass to <code>down</code></p> <code>{}</code> Example <pre><code># All  machines\n&gt; ogc ubuntu.py down -v\n# Single machine\n&gt; ogc ubuntu.py down -v -o instance_id=5407368969918077947\n</code></pre> <p>Returns:</p> Type Description <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>ogc/deployer.py</code> <pre><code>@signals.down.connect\ndef down(provisioner: BaseProvisioner, **kwargs: MachineOpts) -&gt; bool:\n\"\"\"Tear down machines\n    Pass in a **optional** mapping of options to filter machines\n    Args:\n        provisioner: Provisioner\n        kwargs: Mapping of options to pass to `down`\n    Example:\n        ``` bash\n        # All  machines\n        &gt; ogc ubuntu.py down -v\n        # Single machine\n        &gt; ogc ubuntu.py down -v -o instance_id=5407368969918077947\n        ```\n    Returns:\n        True if successful, False otherwise.\n    \"\"\"\nnodes = __filter_machines(**kwargs)\nkwargs.update({\"cmd\": \"./teardown\"})\nif not exec(provisioner, **kwargs):\nlog.debug(\"Could not run teardown script\")\nprovisioner.destroy(nodes=nodes)\nfor machine in nodes:\nlog.info(f\"Deleting data for {machine.instance_name}\")\nmachine.delete_instance()\nreturn True\n</code></pre>"},{"location":"developer-guide/api/deployer/#ogc.deployer.ls","title":"ls","text":"<pre><code>ls(\nprovisioner: BaseProvisioner, **kwargs: MachineOpts\n) -&gt; list[MachineModel] | None\n</code></pre> <p>Return a list of machines for deployment</p> <p>Pass in a mapping of options to filter machines</p> <p>Parameters:</p> Name Type Description Default <code>provisioner</code> <code>BaseProvisioner</code> <p>Provisioner</p> required <code>kwargs</code> <code>MachineOpts</code> <p>Mapping of options to pass to <code>ls</code></p> <code>{}</code> Additional Options Key Value output_file Where to store status output, filename can end with .html or .svg Example <pre><code>&gt; ogc ubuntu.py ls -v -o limit=8\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 ID                             \u2503 Name                                 \u2503 Created            \u2503 Status       \u2503 Labels                                                                                      \u2503 Connection                                                                                   \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 5407368969918077947            \u2502 ogc-ubuntu-ogc-f664-000              \u2502 an hour ago        \u2502 running      \u2502 division=engineering,org=obs,team=observability,project=perf                                \u2502 ssh -i /Users/adam/.ssh/id_rsa_libcloud ubuntu@34.134.169.153                                 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 3631668729125788664            \u2502 ogc-ubuntu-ogc-f664-001              \u2502 an hour ago        \u2502 running      \u2502 division=engineering,org=obs,team=observability,project=perf                                \u2502 ssh -i /Users/adam/.ssh/id_rsa_libcloud ubuntu@34.133.188.125                                 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 3575202029581097972            \u2502 ogc-ubuntu-ogc-f664-002              \u2502 an hour ago        \u2502 running      \u2502 division=engineering,org=obs,team=observability,project=perf                                \u2502 ssh -i /Users/adam/.ssh/id_rsa_libcloud ubuntu@104.155.176.229                                \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 4961396037101018096            \u2502 ogc-ubuntu-ogc-f664-003              \u2502 an hour ago        \u2502 running      \u2502 division=engineering,org=obs,team=observability,project=perf                                \u2502 ssh -i /Users/adam/.ssh/id_rsa_libcloud ubuntu@34.71.231.9                                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 6845512080056900556            \u2502 ogc-ubuntu-ogc-f664-004              \u2502 an hour ago        \u2502 running      \u2502 division=engineering,org=obs,team=observability,project=perf                                \u2502 ssh -i /Users/adam/.ssh/id_rsa_libcloud ubuntu@34.170.61.39                                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 8257796978812902341            \u2502 ogc-ubuntu-ogc-f664-006              \u2502 an hour ago        \u2502 running      \u2502 division=engineering,org=obs,team=observability,project=perf                                \u2502 ssh -i /Users/adam/.ssh/id_rsa_libcloud ubuntu@34.170.252.152                                 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 4654244594843638721            \u2502 ogc-ubuntu-ogc-f664-007              \u2502 an hour ago        \u2502 running      \u2502 division=engineering,org=obs,team=observability,project=perf                                \u2502 ssh -i /Users/adam/.ssh/id_rsa_libcloud ubuntu@34.133.234.5                                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2604966443513535453            \u2502 ogc-ubuntu-ogc-f664-008              \u2502 an hour ago        \u2502 running      \u2502 division=engineering,org=obs,team=observability,project=perf                                \u2502 ssh -i /Users/adam/.ssh/id_rsa_libcloud ubuntu@35.226.159.94                                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nNode Count: 8\n</code></pre> <p>Returns:</p> Type Description <code>list[MachineModel] | None</code> <p>List of deployed machines</p> Source code in <code>ogc/deployer.py</code> <pre><code>@signals.ls.connect\ndef ls(\nprovisioner: BaseProvisioner, **kwargs: MachineOpts\n) -&gt; list[MachineModel] | None:\n\"\"\"Return a list of machines for deployment\n    Pass in a mapping of options to filter machines\n    Args:\n        provisioner: Provisioner\n        kwargs: Mapping of options to pass to `ls`\n    Additional Options:\n        |Key|Value|\n        |---|-----|\n        | output_file | Where to store status output, filename can end with .html or .svg |\n    Example:\n        ``` bash\n        &gt; ogc ubuntu.py ls -v -o limit=8\n        \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n        \u2503 ID                             \u2503 Name                                 \u2503 Created            \u2503 Status       \u2503 Labels                                                                                      \u2503 Connection                                                                                   \u2503\n        \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n        \u2502 5407368969918077947            \u2502 ogc-ubuntu-ogc-f664-000              \u2502 an hour ago        \u2502 running      \u2502 division=engineering,org=obs,team=observability,project=perf                                \u2502 ssh -i /Users/adam/.ssh/id_rsa_libcloud ubuntu@34.134.169.153                                 \u2502\n        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u2502 3631668729125788664            \u2502 ogc-ubuntu-ogc-f664-001              \u2502 an hour ago        \u2502 running      \u2502 division=engineering,org=obs,team=observability,project=perf                                \u2502 ssh -i /Users/adam/.ssh/id_rsa_libcloud ubuntu@34.133.188.125                                 \u2502\n        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u2502 3575202029581097972            \u2502 ogc-ubuntu-ogc-f664-002              \u2502 an hour ago        \u2502 running      \u2502 division=engineering,org=obs,team=observability,project=perf                                \u2502 ssh -i /Users/adam/.ssh/id_rsa_libcloud ubuntu@104.155.176.229                                \u2502\n        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u2502 4961396037101018096            \u2502 ogc-ubuntu-ogc-f664-003              \u2502 an hour ago        \u2502 running      \u2502 division=engineering,org=obs,team=observability,project=perf                                \u2502 ssh -i /Users/adam/.ssh/id_rsa_libcloud ubuntu@34.71.231.9                                    \u2502\n        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u2502 6845512080056900556            \u2502 ogc-ubuntu-ogc-f664-004              \u2502 an hour ago        \u2502 running      \u2502 division=engineering,org=obs,team=observability,project=perf                                \u2502 ssh -i /Users/adam/.ssh/id_rsa_libcloud ubuntu@34.170.61.39                                   \u2502\n        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u2502 8257796978812902341            \u2502 ogc-ubuntu-ogc-f664-006              \u2502 an hour ago        \u2502 running      \u2502 division=engineering,org=obs,team=observability,project=perf                                \u2502 ssh -i /Users/adam/.ssh/id_rsa_libcloud ubuntu@34.170.252.152                                 \u2502\n        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u2502 4654244594843638721            \u2502 ogc-ubuntu-ogc-f664-007              \u2502 an hour ago        \u2502 running      \u2502 division=engineering,org=obs,team=observability,project=perf                                \u2502 ssh -i /Users/adam/.ssh/id_rsa_libcloud ubuntu@34.133.234.5                                   \u2502\n        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n        \u2502 2604966443513535453            \u2502 ogc-ubuntu-ogc-f664-008              \u2502 an hour ago        \u2502 running      \u2502 division=engineering,org=obs,team=observability,project=perf                                \u2502 ssh -i /Users/adam/.ssh/id_rsa_libcloud ubuntu@35.226.159.94                                  \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        Node Count: 8\n        ```\n    Returns:\n        List of deployed machines\n    \"\"\"\ndef ui_nodes_table(\nnodes: list[MachineModel], output_file: str | None = None\n) -&gt; None:\ncon.record = True\nrows = nodes\nrows_count = len(rows)\ntable = Table(\ncaption=f\"Node Count: [green]{rows_count}[/]\",\nheader_style=\"yellow on black\",\ncaption_justify=\"left\",\nexpand=True,\nwidth=con.width,\nshow_lines=True,\n)\ntable.add_column(\"ID\")\ntable.add_column(\"Name\")\ntable.add_column(\"Created\")\ntable.add_column(\"Status\")\ntable.add_column(\"Labels\")\ntable.add_column(\"Connection\", style=\"bold red on black\")\nfor data in rows:\ntable.add_row(\ndata.instance_id,\ndata.instance_name,\narrow.get(data.created).humanize(),\ndata.instance_state,\n\",\".join(\n[f\"[purple]{k}[/]={v}\" for k, v in data.layout.labels.items()]\n),\nf\"ssh -i {Path(data.layout.ssh_private_key).expanduser()} {data.layout.username}@{data.public_ip}\",\n)\ncon.print(table, justify=\"center\")\nif output_file:\nif output_file.endswith(\"svg\"):\ncon.save_svg(output_file, title=\"Node List Output\")\nelif output_file.endswith(\"html\"):\ncon.save_html(output_file)\nelse:\nlog.error(\nf\"Unknown extension for {output_file}, must end in '.svg' or '.html'\"\n)\ncon.record = False\nlog.info(\"Querying database for machines\")\nnodes = __filter_machines(**kwargs)\nui_nodes_table(nodes=nodes, output_file=kwargs.get(\"output_file\", None))\nreturn nodes if nodes else None\n</code></pre>"},{"location":"developer-guide/api/deployer/#ogc.deployer.exec","title":"exec","text":"<pre><code>exec(\nprovisioner: BaseProvisioner, **kwargs: MachineOpts\n) -&gt; bool\n</code></pre> <p>Execute commands on node(s)</p> <p>Parameters:</p> Name Type Description Default <code>provisioner</code> <code>BaseProvisioner</code> <p>provisioner</p> required <code>kwargs</code> <code>MachineOpts</code> <p>Options to exec</p> <code>{}</code> Additional Options Key Value cmd command to execute on remote machines Example <pre><code>&gt; ogc ubuntu.py exec -v -o cmd='ls -l'\n# Single machine\n&gt; ogc ubuntu.py exec -v -o cmd='ls -l' -o instance_id=2349146264239594441\n</code></pre> <p>Returns:</p> Type Description <code>bool</code> <p>True if succesful, False otherwise.</p> Source code in <code>ogc/deployer.py</code> <pre><code>@signals.exec.connect\ndef exec(provisioner: BaseProvisioner, **kwargs: MachineOpts) -&gt; bool:\n\"\"\"Execute commands on node(s)\n    Args:\n        provisioner: provisioner\n        kwargs: Options to exec\n    Additional Options:\n        |Key|Value|\n        |---|-----|\n        | cmd | command to execute on remote machines |\n    Example:\n        ``` bash\n        &gt; ogc ubuntu.py exec -v -o cmd='ls -l'\n        # Single machine\n        &gt; ogc ubuntu.py exec -v -o cmd='ls -l' -o instance_id=2349146264239594441\n        ```\n    Returns:\n        True if succesful, False otherwise.\n    \"\"\"\ncmd: str | None = None\nnodes: list[MachineModel] | None = None\nif \"cmd\" in kwargs:\ncmd = kwargs[\"cmd\"]\nnodes = __filter_machines(**kwargs)\nlog.info(f\"Executing commands across {len(nodes)} node(s)\")\ndef _exec(node: bytes, cmd: str) -&gt; bool:\n_node: MachineModel = t.cast(MachineModel, db.pickle_to_model(node))\ncmd_opts = [\n\"-o\",\n\"StrictHostKeyChecking=no\",\n\"-o\",\n\"UserKnownHostsFile=/dev/null\",\n\"-i\",\nPath(_node.layout.ssh_private_key).expanduser(),\nf\"{_node.layout.username}@{_node.public_ip}\",\n]\ncmd_opts.append(cmd)\nreturn_status = None\ntry:\nout = sh.ssh(cmd_opts, _env=os.environ.copy(), _err_to_out=True)\nreturn_status = dict(\nexit_code=out.exit_code,\nout=out.stdout.decode(),\nerror=out.stderr.decode(),\ncmd=\" \".join(txt.decode() for txt in out.cmd),\n)\nexcept sh.ErrorReturnCode as e:\nreturn_status = dict(\nexit_code=e.exit_code,\nout=e.stdout.decode(),\nerror=e.stderr.decode(),\ncmd=str(e.full_cmd),\n)\nif return_status:\nlog.debug(return_status)\naction = ActionModel(\nmachine=_node,\nexit_code=return_status[\"exit_code\"],\nout=return_status[\"out\"],\nerr=return_status[\"error\"],\ncmd=str(return_status[\"cmd\"]),\n)\naction.save()\nreturn bool(return_status[\"exit_code\"] == 0)\nreturn False\nif cmd:\nwith ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:\nfunc = partial(_exec, cmd=cmd)\nresults = [\nexecutor.submit(func, db.model_as_pickle(node)) for node in nodes\n]\nwait(results, timeout=5)\nreturn True\nreturn False\n</code></pre>"},{"location":"developer-guide/api/deployer/#ogc.deployer.exec_scripts","title":"exec_scripts","text":"<pre><code>exec_scripts(\nprovisioner: BaseProvisioner, **kwargs: MachineOpts\n) -&gt; bool\n</code></pre> <p>Execute scripts</p> <p>Executing scripts/templates on a node.</p> <p>Parameters:</p> Name Type Description Default <code>provisioner</code> <code>BaseProvisioner</code> <p>provisioner</p> required <code>kwargs</code> <code>MachineOpts</code> <p>Options to exec_scripts</p> <code>{}</code> Additional Options Key Value scripts custom scripts path to execute Example <pre><code>&gt; ogc ubuntu.py exec_scripts -v -o scripts='/home/ubuntu/new-deploy-scripts'\n# Optionally, run the scripts defined in the layout\n&gt; ogc ubuntu.py exec_scripts -v\n</code></pre> <p>Returns:</p> Type Description <code>bool</code> <p>True if succesful, False otherwise.</p> Source code in <code>ogc/deployer.py</code> <pre><code>@signals.exec_scripts.connect\ndef exec_scripts(\nprovisioner: BaseProvisioner,\n**kwargs: MachineOpts,\n) -&gt; bool:\n\"\"\"Execute scripts\n    Executing scripts/templates on a node.\n    Args:\n        provisioner: provisioner\n        kwargs: Options to exec_scripts\n    Additional Options:\n        |Key|Value|\n        |---|-----|\n        | scripts | custom scripts path to execute |\n    Example:\n        ``` bash\n        &gt; ogc ubuntu.py exec_scripts -v -o scripts='/home/ubuntu/new-deploy-scripts'\n        # Optionally, run the scripts defined in the layout\n        &gt; ogc ubuntu.py exec_scripts -v\n        ```\n    Returns:\n        True if succesful, False otherwise.\n    \"\"\"\nscripts: str | None = None\nnodes: list[MachineModel] | None = None\nif \"scripts\" in kwargs:\nscripts = kwargs[\"scripts\"]\nnodes = __filter_machines(**kwargs)\nlog.info(f\"Executing scripts across {len(nodes)} node(s)\")\ndef _exec_scripts(node: bytes, scripts: str | Path | None = None) -&gt; bool:\n_node: MachineModel = t.cast(MachineModel, db.pickle_to_model(node))\n_scripts = Path(scripts) if scripts else Path(_node.layout.scripts)\nif not _scripts.exists():\nreturn False\nif not _scripts.is_dir():\nscripts_to_run = [_scripts.resolve()]\nelse:\n# teardown file is a special file that gets executed before node\n# destroy\nscripts_to_run = [\nfname for fname in _scripts.glob(\"**/*\") if fname.stem != \"teardown\"\n]\ncontext = Ctx(\nenv=os.environ.copy(),\nnode=_node,\nnodes=[node for node in MachineModel.select()],\n)\nsteps: list[Deployment] = [\nScriptDeployment(script=render(s, context), name=s.name)\nfor s in scripts_to_run\nif s.is_file()\n]\n# Add teardown script as just a filedeployment\nteardown_script = _scripts / \"teardown\"\nif teardown_script.exists():\nwith tempfile.NamedTemporaryFile(delete=False) as fp:\ntemp_contents = render(teardown_script, context)\nfp.write(temp_contents.encode())\nsteps.append(FileDeployment(fp.name, \"teardown\"))\nsteps.append(ScriptDeployment(\"chmod +x teardown\"))\nif steps:\nmsd = MultiStepDeployment(steps)\nssh_client = _node.ssh()\nif ssh_client:\nnode_state = _node.state()\nif node_state:\nmsd.run(node_state, ssh_client)\nfor step in msd.steps:\nmatch step:\ncase FileDeployment():\nlog.debug(\nf\"(source) {step.source if hasattr(step, 'source') else ''} \"\nf\"(target) {step.target if hasattr(step, 'target') else ''} \"\n)\ncase ScriptDeployment():\nlog.debug(\nf\"(exit) {step.exit_status if hasattr(step, 'exit_status') else 0} \"\nf\"(out) {step.stdout if hasattr(step, 'stdout') else ''} \"\nf\"(stderr) {step.stderr if hasattr(step, 'stderr') else ''}\"\n)\naction = ActionModel(\nmachine=_node,\nexit_code=step.exit_status\nif hasattr(step, \"exit_status\")\nelse 0,\nout=step.stdout if hasattr(step, \"stdout\") else \"\",\nerr=step.stderr if hasattr(step, \"stderr\") else \"\",\ncmd=f\"{step.script} {step.args}\",\n)\naction.save()\ncase _:\nlog.debug(step)\nreturn True\nwith ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:\nfunc = partial(_exec_scripts, scripts=scripts)\nresults = [executor.submit(func, db.model_as_pickle(node)) for node in nodes]\nwait(results, timeout=5)\nreturn all([res.result() is True for res in results])\n</code></pre>"},{"location":"developer-guide/api/fs/","title":"API","text":""},{"location":"developer-guide/api/fs/#ogc.fs.Path","title":"Path  <code>module-attribute</code>","text":"<pre><code>Path = Path_\n</code></pre>"},{"location":"developer-guide/api/fs/#ogc.fs.ensure_cache_dir","title":"ensure_cache_dir","text":"<pre><code>ensure_cache_dir() -&gt; Path_\n</code></pre> <p>Make sure cache directory exists</p> <p>Returns:</p> Type Description <code>Path_</code> <p>Path to cache_dir</p> Source code in <code>ogc/fs.py</code> <pre><code>def ensure_cache_dir() -&gt; Path_:\n\"\"\"Make sure cache directory exists\n    Returns:\n        Path to cache_dir\n    \"\"\"\ncache_dir = Path(__file__).cwd() / \".ogc-cache\"\nif not cache_dir.exists():\nos.makedirs(str(cache_dir))\nreturn cache_dir\n</code></pre>"},{"location":"developer-guide/api/fs/#ogc.fs.expand_path","title":"expand_path","text":"<pre><code>expand_path(p: str) -&gt; Path_\n</code></pre> <p>Returns expanded path</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>str</code> <p>tilde path string to expand</p> required <p>Returns:</p> Type Description <code>Path_</code> <p>Path object expanded</p> Source code in <code>ogc/fs.py</code> <pre><code>def expand_path(p: str) -&gt; Path_:\n\"\"\"Returns expanded path\n    Args:\n        p: tilde path string to expand\n    Returns:\n        Path object expanded\n    \"\"\"\nreturn Path_(p).expanduser()\n</code></pre>"},{"location":"developer-guide/api/loader/","title":"API","text":"<p>module loader utils</p>"},{"location":"developer-guide/api/loader/#ogc.loader.log","title":"log  <code>module-attribute</code>","text":"<pre><code>log = get_logger('ogc')\n</code></pre>"},{"location":"developer-guide/api/loader/#ogc.loader.from_path","title":"from_path","text":"<pre><code>from_path(path: Path) -&gt; object | None\n</code></pre> <p>Loads module into intepreter</p> Source code in <code>ogc/loader.py</code> <pre><code>def from_path(path: Path) -&gt; object | None:\n\"\"\"Loads module into intepreter\"\"\"\npath_parents = path.parent\nsys.path.insert(0, str(path_parents.resolve()))\nmodule = path.parts[-1]\nmodname, _ = os.path.splitext(module)\ntry:\nreturn importlib.import_module(modname)\nexcept ModuleNotFoundError as e:\nlog.warning(f\"Could not load layout: {e}\")\nreturn None\n</code></pre>"},{"location":"developer-guide/api/loader/#ogc.loader.run","title":"run","text":"<pre><code>run(mod: object, func: str, **kwargs: str) -&gt; None\n</code></pre> <p>Runs the module function passing in options</p> Source code in <code>ogc/loader.py</code> <pre><code>def run(mod: object, func: str, **kwargs: str) -&gt; None:\n\"\"\"Runs the module function passing in options\"\"\"\ndep = None\ntry:\ndeploy = getattr(mod, \"deployment\")\n_, dep = deploy[0]\nexcept AttributeError as exc:\nlog.debug(\n\"Could not find deployment entry, make sure the \"\n\"step has `deployment = init(layout_model=dict()`\",\nexc_info=exc,\n)\nsys.exit(1)\ntry:\ntask_cmd = getattr(mod, func)\ntask_cmd(**kwargs)\nexcept AttributeError:\nlog.debug(f\"Could not find custom task {func}, searching signals...\")\ntry:\nsig = importlib.import_module(\"ogc.signals\")\ntask_cmd = getattr(sig, func)\ntask_cmd.send(dep, **kwargs)\nexcept ModuleNotFoundError as e:\nlog.debug(\"Could not find signal either, exiting.\", exc_info=e)\nreturn None\n</code></pre>"},{"location":"developer-guide/api/provision/","title":"API","text":"<p>Provides abstraction for the GCE provisioner</p> Required Environment Variables <ul> <li>GOOGLE_APPLICATION_SERVICE_ACCOUNT</li> <li>GOOGLE_APPLICATION_CREDENTIALS</li> <li>GOOGLE_PROJECT</li> <li>GOOGLE_DATACENTER</li> </ul> <p>AWS Provisioner</p> Required Environment Variables <ul> <li>AWS_ACCESS_KEY_ID</li> <li>AWS_SECRET_ACCESS_KEY</li> </ul> Optional Environment Variables <ul> <li>AWS_REGION</li> </ul>"},{"location":"developer-guide/api/provision/#ogc.provision.GCEProvisioner.options","title":"options  <code>property</code>","text":"<pre><code>options: t.Mapping[str, str]\n</code></pre>"},{"location":"developer-guide/api/provision/#ogc.provision.GCEProvisioner.connect","title":"connect","text":"<pre><code>connect() -&gt; NodeDriver\n</code></pre> Source code in <code>ogc/provision.py</code> <pre><code>@retry(tries=5, logger=None)\ndef connect(self) -&gt; NodeDriver:\nlog.info(\"Establing provider connection...\")\nlog.debug(self.options)\ngce = get_driver(Provider.GCE)\nreturn gce(**self.options)\n</code></pre>"},{"location":"developer-guide/api/provision/#ogc.provision.GCEProvisioner.destroy","title":"destroy","text":"<pre><code>destroy(nodes: list[MachineModel]) -&gt; bool\n</code></pre> Source code in <code>ogc/provision.py</code> <pre><code>def destroy(self, nodes: list[MachineModel]) -&gt; bool:\n_nodes = self.provisioner.ex_destroy_multiple_nodes(\nnode_list=[node.state() for node in nodes], destroy_boot_disk=True\n)  # type: ignore\nreturn all([node is True for node in _nodes])\n</code></pre>"},{"location":"developer-guide/api/provision/#ogc.provision.GCEProvisioner.setup","title":"setup","text":"<pre><code>setup() -&gt; None\n</code></pre> Source code in <code>ogc/provision.py</code> <pre><code>def setup(self) -&gt; None:\ntags = self.layout.tags or []\nif self.layout.ports:\nself.create_firewall(self.layout.name, self.layout.ports, tags)\n</code></pre>"},{"location":"developer-guide/api/provision/#ogc.provision.GCEProvisioner.cleanup","title":"cleanup","text":"<pre><code>cleanup(\nnode: MachineModel, **kwargs: t.Mapping[str, t.Any]\n) -&gt; bool\n</code></pre> Source code in <code>ogc/provision.py</code> <pre><code>def cleanup(self, node: MachineModel, **kwargs: t.Mapping[str, t.Any]) -&gt; bool:\nreturn True\n</code></pre>"},{"location":"developer-guide/api/provision/#ogc.provision.GCEProvisioner.image","title":"image","text":"<pre><code>image(runs_on: str) -&gt; NodeImage\n</code></pre> Source code in <code>ogc/provision.py</code> <pre><code>def image(self, runs_on: str) -&gt; NodeImage:\n# Pull from partial first\ntry:\npartial_image: NodeImage = self.provisioner.ex_get_image_from_family(runs_on)  # type: ignore\nif partial_image:\nreturn partial_image\nexcept ResourceNotFoundError:\nlog.debug(f\"Could not find {runs_on}, falling back internal image map\")\n_runs_on = CLOUD_IMAGE_MAP[\"google\"][\"amd64\"].get(runs_on)\ntry:\nreturn [i for i in self.images() if i.name == _runs_on][0]\nexcept IndexError:\nraise ProvisionException(f\"Could not determine image for {_runs_on}\")\n</code></pre>"},{"location":"developer-guide/api/provision/#ogc.provision.GCEProvisioner.create_firewall","title":"create_firewall","text":"<pre><code>create_firewall(\nname: str, ports: list[str], tags: list[str]\n) -&gt; None\n</code></pre> Source code in <code>ogc/provision.py</code> <pre><code>def create_firewall(self, name: str, ports: list[str], tags: list[str]) -&gt; None:\nports = [port.split(\":\")[0] for port in ports]\ntry:\nself.provisioner.ex_get_firewall(name)  # type: ignore\nexcept ResourceNotFoundError:\nlog.warning(\"No firewall found, will create one to attach nodes to.\")\nself.provisioner.ex_create_firewall(  # type: ignore\nname, [{\"IPProtocol\": \"tcp\", \"ports\": ports}], target_tags=tags\n)\n</code></pre>"},{"location":"developer-guide/api/provision/#ogc.provision.GCEProvisioner.delete_firewall","title":"delete_firewall","text":"<pre><code>delete_firewall(name: str) -&gt; None\n</code></pre> Source code in <code>ogc/provision.py</code> <pre><code>def delete_firewall(self, name: str) -&gt; None:\ntry:\nself.provisioner.ex_destroy_firewall(self.provisioner.ex_get_firewall(name))  # type: ignore\nexcept ResourceNotFoundError:\nlog.error(f\"Unable to delete firewall {name}\")\n</code></pre>"},{"location":"developer-guide/api/provision/#ogc.provision.GCEProvisioner.list_firewalls","title":"list_firewalls","text":"<pre><code>list_firewalls() -&gt; list[str]\n</code></pre> Source code in <code>ogc/provision.py</code> <pre><code>def list_firewalls(self) -&gt; list[str]:\nreturn self.provisioner.ex_list_firewalls()  # type: ignore\n</code></pre>"},{"location":"developer-guide/api/provision/#ogc.provision.GCEProvisioner.create","title":"create","text":"<pre><code>create() -&gt; list[MachineModel] | None\n</code></pre> Source code in <code>ogc/provision.py</code> <pre><code>def create(self) -&gt; list[MachineModel] | None:\nimage = self.image(self.layout.runs_on)\nif not image and not self.layout.username:\nraise ProvisionException(\nf\"Could not locate AMI and/or username for: {self.layout.runs_on}\"\n)\nsize = self.sizes(self.layout.instance_size)[0]\nex_metadata = {\n\"items\": [\n{\n\"key\": \"ssh-keys\",\n\"value\": \"%s: %s\"\n% (\nself.layout.username,\nPath(self.layout.ssh_public_key)\n.expanduser()\n.read_text()\n.strip(),\n),\n},\n{\n\"key\": \"startup-script\",\n\"value\": self._userdata()\nif \"windows\" not in self.layout.runs_on\nelse \"\",\n},\n]\n}\nif self.layout.ports:\nself.create_firewall(self.layout.name, self.layout.ports, self.layout.tags)\nnow = datetime.datetime.utcnow().strftime(\"created-%Y-%m-%d\")\nif self.layout.tags:\nself.layout.tags.append(now)\nself.layout.tags.append(f\"user-{os.environ.get('USER', 'ogc')}\")\n# Store some extra metadata similar to what other projects use\nself.layout.tags.append(\"environment-ogc\")\nself.layout.tags.append(\"repo-ogc\")\nsuffix = str(uuid.uuid4())[:4]\nopts = dict(\nbase_name=f\"ogc-{self.layout.name}-{suffix}\",\nimage=image,\nsize=size,\nnumber=self.layout.scale,\nex_metadata=ex_metadata,\nex_tags=self.layout.tags,\nex_labels=self.layout.labels,\nex_disk_type=\"pd-ssd\",\nex_disk_size=100,\nex_preemptible=os.environ.get(\"OGC_DISABLE_SPOT\", True),\n)\n_nodes = self.provisioner.ex_create_multiple_nodes(**opts)  # type: ignore\n_machines = []\nfor node in _nodes:\nstate_file_p = db.cache_path() / node.id\nstate_file_p.write_bytes(db.model_as_pickle(node))\nmachine = MachineModel(\nlayout=self.layout,\ninstance_name=node.name,\ninstance_id=node.id,\ninstance_state=node.state,\npublic_ip=node.public_ips[0],\nprivate_ip=node.private_ips[0],\nremote_state_file=(db.cache_path() / node.id).resolve(),\n)\nmachine.save()\n_machines.append(machine)\nreturn _machines\n</code></pre>"},{"location":"developer-guide/api/provision/#ogc.provision.GCEProvisioner.node","title":"node","text":"<pre><code>node(**kwargs: dict[str, object]) -&gt; Node | None\n</code></pre> Source code in <code>ogc/provision.py</code> <pre><code>def node(self, **kwargs: dict[str, object]) -&gt; Node | None:\n_nodes = self.provisioner.list_nodes()\ninstance_id = None\nif \"instance_id\" in kwargs:\ninstance_id = kwargs[\"instance_id\"]\n_node = [n for n in _nodes if n.id == instance_id]\nreturn _node[0] if len(_node) &gt; 0 else None\n</code></pre>"},{"location":"developer-guide/api/provision/#ogc.provision.GCEProvisioner.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> Source code in <code>ogc/provision.py</code> <pre><code>def __str__(self) -&gt; str:\nreturn f\"&lt;GCEProvisioner [{self.options['datacenter']}]&gt;\"\n</code></pre>"},{"location":"developer-guide/api/provision/#ogc.provision.AWSProvisioner.options","title":"options  <code>property</code>","text":"<pre><code>options: t.Mapping[str, str]\n</code></pre>"},{"location":"developer-guide/api/provision/#ogc.provision.AWSProvisioner.connect","title":"connect","text":"<pre><code>connect() -&gt; NodeDriver\n</code></pre> Source code in <code>ogc/provision.py</code> <pre><code>@retry(delay=5, tries=10, jitter=(5, 25), logger=None)\ndef connect(self) -&gt; NodeDriver:\naws = get_driver(Provider.EC2)\nreturn aws(**self.options)\n</code></pre>"},{"location":"developer-guide/api/provision/#ogc.provision.AWSProvisioner.setup","title":"setup","text":"<pre><code>setup() -&gt; None\n</code></pre> Source code in <code>ogc/provision.py</code> <pre><code>def setup(self) -&gt; None:\nif self.layout.ports:\nself.create_firewall(self.layout.name, self.layout.ports)\nif not any(kp.name == self.layout.name for kp in self.list_key_pairs()):\nself.create_keypair(self.layout.name, str(self.layout.ssh_public_key))\n</code></pre>"},{"location":"developer-guide/api/provision/#ogc.provision.AWSProvisioner.cleanup","title":"cleanup","text":"<pre><code>cleanup(node: Node, **kwargs: dict[str, object]) -&gt; bool\n</code></pre> Source code in <code>ogc/provision.py</code> <pre><code>def cleanup(self, node: Node, **kwargs: dict[str, object]) -&gt; bool:\npass\n</code></pre>"},{"location":"developer-guide/api/provision/#ogc.provision.AWSProvisioner.image","title":"image","text":"<pre><code>image(runs_on: str) -&gt; NodeImage\n</code></pre> Source code in <code>ogc/provision.py</code> <pre><code>def image(self, runs_on: str) -&gt; NodeImage:\nif runs_on.startswith(\"ami-\"):\n_runs_on: str = runs_on\nelse:\n# FIXME: need proper architecture detection\n_runs_on = CLOUD_IMAGE_MAP[\"aws\"][\"amd64\"].get(runs_on, \"\")\nreturn super().image(_runs_on)\n</code></pre>"},{"location":"developer-guide/api/provision/#ogc.provision.AWSProvisioner.create_firewall","title":"create_firewall","text":"<pre><code>create_firewall(name: str, ports: list[str]) -&gt; None\n</code></pre> <p>Creates the security group for enabling traffic between nodes</p> Source code in <code>ogc/provision.py</code> <pre><code>def create_firewall(self, name: str, ports: list[str]) -&gt; None:\n\"\"\"Creates the security group for enabling traffic between nodes\"\"\"\nif not any(sg.name == name for sg in self.provisioner.ex_get_security_groups()):  # type: ignore\nself.provisioner.ex_create_security_group(name, \"ogc sg\", vpc_id=None)  # type: ignore\nfor port in ports:\ningress, egress = port.split(\":\")\nself.provisioner.ex_authorize_security_group(  # type: ignore\nname, ingress, egress, \"0.0.0.0/0\", \"tcp\"\n)\n</code></pre>"},{"location":"developer-guide/api/provision/#ogc.provision.AWSProvisioner.delete_firewall","title":"delete_firewall","text":"<pre><code>delete_firewall(name: str) -&gt; None\n</code></pre> Source code in <code>ogc/provision.py</code> <pre><code>def delete_firewall(self, name: str) -&gt; None:\npass\n</code></pre>"},{"location":"developer-guide/api/provision/#ogc.provision.AWSProvisioner.create","title":"create","text":"<pre><code>create() -&gt; list[MachineModel] | None\n</code></pre> Source code in <code>ogc/provision.py</code> <pre><code>def create(self) -&gt; list[MachineModel] | None:\npub_key = Path(self.layout.ssh_public_key).expanduser().read_text()\nauth = NodeAuthSSHKey(pub_key)\nimage = self.image(self.layout.runs_on)\nif not image and not self.layout.username:\nraise ProvisionException(\nf\"Could not locate AMI and/or username for: {self.layout.runs_on}\"\n)\nsize = self.sizes(self.layout.instance_size)[0]\nopts = dict(\nname=f\"{str(uuid.uuid4())[:8]}-{self.layout.name}\",\nimage=image,\nsize=size,\nauth=auth,\nex_securitygroup=self.layout.name,\nex_spot=True,\nex_maxcount=self.layout.scale,\nex_userdata=self._userdata()\nif \"windows\" not in self.layout.runs_on\nelse \"\",\nex_terminate_on_shutdown=True,\n)\ntags = {}\n# Store some metadata for helping with cleanup\nnow = datetime.datetime.utcnow().strftime(\"%Y-%m-%d\")\nif self.layout.tags:\nself.layout.tags.append(now)\nself.layout.tags.append(f\"user-{os.environ.get('USER', 'ogc')}\")\ntags[\"created\"] = now\ntags[\"user_tag\"] = f\"user-{os.environ.get('USER', 'ogc')}\"\n# Store some extra metadata similar to what other projects use\nepoch = str(datetime.datetime.now().timestamp())\ntags[\"created_date\"] = epoch\ntags[\"environment\"] = \"ogc\"\ntags[\"repo\"] = \"ogc\"\nnode = self.provisioner.create_node(**opts)  # type: ignore\n_machines = []\nstate_file_p = db.cache_path() / node.id\nstate_file_p.write_bytes(db.model_as_pickle(node))\nmachine = MachineModel(\nlayout=self.layout,\ninstance_name=node.name,\ninstance_id=node.id,\ninstance_state=node.state,\npublic_ip=node.public_ips[0],\nprivate_ip=node.private_ips[0],\nremote_state_file=(db.cache_path() / node.id).resolve(),\n)\nmachine.save()\n_machines.append(machine)\nreturn _machines if _machines else None\n</code></pre>"},{"location":"developer-guide/api/provision/#ogc.provision.AWSProvisioner.node","title":"node","text":"<pre><code>node(**kwargs: dict[str, object]) -&gt; Node\n</code></pre> Source code in <code>ogc/provision.py</code> <pre><code>def node(self, **kwargs: dict[str, object]) -&gt; Node:\ninstance_id = kwargs.get(\"instance_id\", None)\n_nodes = self.provisioner.list_nodes(ex_node_ids=[instance_id])\nif _nodes:\nreturn _nodes[0]\nraise ProvisionException(\"Unable to get node information\")\n</code></pre>"},{"location":"developer-guide/api/provision/#ogc.provision.AWSProvisioner.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> Source code in <code>ogc/provision.py</code> <pre><code>def __str__(self) -&gt; str:\nreturn f\"&lt;AWSProvisioner [{self.options['region']}]&gt;\"\n</code></pre>"},{"location":"developer-guide/api/templatetags/","title":"API","text":"<p>ogc template tag helpers</p>"},{"location":"developer-guide/api/templatetags/#ogc.templatetags.LINE_SEP","title":"LINE_SEP  <code>module-attribute</code>","text":"<pre><code>LINE_SEP = '-'\n</code></pre>"},{"location":"developer-guide/api/templatetags/#ogc.templatetags.run","title":"run","text":"<pre><code>run(\nexe: str, *args: str | None, **kwargs: bool | None\n) -&gt; str\n</code></pre> <p>Converts a <code>sh.Command</code> to its string reprsentation</p> Source code in <code>ogc/templatetags.py</code> <pre><code>def run(exe: str, *args: str | None, **kwargs: bool | None) -&gt; str:\n\"\"\"Converts a `sh.Command` to its string reprsentation\"\"\"\ncmd = sh.Command(exe)\nkwargs_parsed = {k: v for k, v in kwargs.items() if not k.startswith(\"_ogc\")}\nout = str(cmd.bake(*args, **kwargs_parsed))\nreturn out\n</code></pre>"},{"location":"developer-guide/api/templatetags/#ogc.templatetags.header","title":"header","text":"<pre><code>header(msg: str) -&gt; str\n</code></pre> <p>Prints header string</p> Source code in <code>ogc/templatetags.py</code> <pre><code>def header(msg: str) -&gt; str:\n\"\"\"Prints header string\"\"\"\nout = [hr(), f\"echo {msg}\", hr()]\nreturn \"\\n\".join(out)\n</code></pre>"},{"location":"developer-guide/api/templatetags/#ogc.templatetags.hr","title":"hr","text":"<pre><code>hr() -&gt; str\n</code></pre> <p>Prints seperator</p> Source code in <code>ogc/templatetags.py</code> <pre><code>def hr() -&gt; str:\n\"\"\"Prints seperator\"\"\"\nreturn f\"echo {LINE_SEP * 79}\"\n</code></pre>"},{"location":"developer-guide/api/models/actions/","title":"API","text":""},{"location":"developer-guide/api/models/actions/#ogc.models.actions.ActionModel.machine","title":"machine  <code>class-attribute</code>","text":"<pre><code>machine = ForeignKeyField(\nMachineModel, backref=\"actions\", on_delete=\"CASCADE\"\n)\n</code></pre>"},{"location":"developer-guide/api/models/actions/#ogc.models.actions.ActionModel.exit_code","title":"exit_code  <code>class-attribute</code>","text":"<pre><code>exit_code = IntegerField(default=0)\n</code></pre>"},{"location":"developer-guide/api/models/actions/#ogc.models.actions.ActionModel.out","title":"out  <code>class-attribute</code>","text":"<pre><code>out = TextField(null=True)\n</code></pre>"},{"location":"developer-guide/api/models/actions/#ogc.models.actions.ActionModel.err","title":"err  <code>class-attribute</code>","text":"<pre><code>err = TextField(null=True)\n</code></pre>"},{"location":"developer-guide/api/models/actions/#ogc.models.actions.ActionModel.cmd","title":"cmd  <code>class-attribute</code>","text":"<pre><code>cmd = TextField(null=True)\n</code></pre>"},{"location":"developer-guide/api/models/actions/#ogc.models.actions.ActionModel.created","title":"created  <code>class-attribute</code>","text":"<pre><code>created = DateTimeField(default=datetime.datetime.utcnow())\n</code></pre>"},{"location":"developer-guide/api/models/actions/#ogc.models.actions.ActionModel.extra","title":"extra  <code>class-attribute</code>","text":"<pre><code>extra = JSONField(null=True)\n</code></pre>"},{"location":"developer-guide/api/models/actions/#ogc.models.actions.ActionModel.is_failed","title":"is_failed  <code>property</code>","text":"<pre><code>is_failed: bool\n</code></pre> <p>Did action pass or fail</p>"},{"location":"developer-guide/api/models/actions/#ogc.models.actions.ActionModel.Meta","title":"Meta","text":""},{"location":"developer-guide/api/models/actions/#ogc.models.actions.ActionModel.Meta.table_name","title":"table_name  <code>class-attribute</code>","text":"<pre><code>table_name = 'actions'\n</code></pre>"},{"location":"developer-guide/api/models/layout/","title":"API","text":"<p>Layout Model</p> <p>Synopsis:</p> <pre><code>from ogc.deployer import init\nfrom ogc.fs import expand_path\nfrom ogc.log import get_logger\nlog = get_logger(\"ogc\")\ndeployment = init(\nlayout_model=dict(\ninstance_size=\"e2-standard-4\",\nname=\"ubuntu-ogc\",\nprovider=\"google\",\nremote_path=\"/home/ubuntu/ogc\",\nruns_on=\"ubuntu-2004-lts\",\nscale=9,\nscripts=\"fixtures/ex_deploy_ubuntu\",\nusername=\"ubuntu\",\nssh_private_key=expand_path(\"~/.ssh/id_rsa_libcloud\"),\nssh_public_key=expand_path(\"~/.ssh/id_rsa_libcloud.pub\"),\nports=[\"22:22\", \"80:80\", \"443:443\", \"5601:5601\"],\ntags=[],\nlabels=dict(\ndivision=\"engineering\", org=\"obs\", team=\"observability\", project=\"perf\"\n),\n),\n)\ndef rerun_scripts(**kwargs: str):\ndeployment.exec_scripts(**kwargs)\n</code></pre> Example <pre><code>&gt; ogc ubuntu.py ls -v\n# Or run a custom task `rerun_scripts`\n&gt; ogc ubuntu.py rerun_scripts -v -o scripts=/a/different/scripts/path\n</code></pre>"},{"location":"developer-guide/api/models/layout/#ogc.models.layout.LayoutModel.instance_size","title":"instance_size  <code>class-attribute</code>","text":"<pre><code>instance_size = CharField()\n</code></pre>"},{"location":"developer-guide/api/models/layout/#ogc.models.layout.LayoutModel.name","title":"name  <code>class-attribute</code>","text":"<pre><code>name = CharField()\n</code></pre>"},{"location":"developer-guide/api/models/layout/#ogc.models.layout.LayoutModel.provider","title":"provider  <code>class-attribute</code>","text":"<pre><code>provider = CharField()\n</code></pre>"},{"location":"developer-guide/api/models/layout/#ogc.models.layout.LayoutModel.remote_path","title":"remote_path  <code>class-attribute</code>","text":"<pre><code>remote_path = CharField()\n</code></pre>"},{"location":"developer-guide/api/models/layout/#ogc.models.layout.LayoutModel.runs_on","title":"runs_on  <code>class-attribute</code>","text":"<pre><code>runs_on = CharField()\n</code></pre>"},{"location":"developer-guide/api/models/layout/#ogc.models.layout.LayoutModel.scale","title":"scale  <code>class-attribute</code>","text":"<pre><code>scale = IntegerField()\n</code></pre>"},{"location":"developer-guide/api/models/layout/#ogc.models.layout.LayoutModel.scripts","title":"scripts  <code>class-attribute</code>","text":"<pre><code>scripts = CharField()\n</code></pre>"},{"location":"developer-guide/api/models/layout/#ogc.models.layout.LayoutModel.username","title":"username  <code>class-attribute</code>","text":"<pre><code>username = CharField()\n</code></pre>"},{"location":"developer-guide/api/models/layout/#ogc.models.layout.LayoutModel.ssh_private_key","title":"ssh_private_key  <code>class-attribute</code>","text":"<pre><code>ssh_private_key = CharField()\n</code></pre>"},{"location":"developer-guide/api/models/layout/#ogc.models.layout.LayoutModel.ssh_public_key","title":"ssh_public_key  <code>class-attribute</code>","text":"<pre><code>ssh_public_key = CharField()\n</code></pre>"},{"location":"developer-guide/api/models/layout/#ogc.models.layout.LayoutModel.tags","title":"tags  <code>class-attribute</code>","text":"<pre><code>tags = JSONField(null=True)\n</code></pre>"},{"location":"developer-guide/api/models/layout/#ogc.models.layout.LayoutModel.labels","title":"labels  <code>class-attribute</code>","text":"<pre><code>labels = JSONField()\n</code></pre>"},{"location":"developer-guide/api/models/layout/#ogc.models.layout.LayoutModel.ports","title":"ports  <code>class-attribute</code>","text":"<pre><code>ports = JSONField()\n</code></pre>"},{"location":"developer-guide/api/models/layout/#ogc.models.layout.LayoutModel.arch","title":"arch  <code>class-attribute</code>","text":"<pre><code>arch = CharField(null=True)\n</code></pre>"},{"location":"developer-guide/api/models/layout/#ogc.models.layout.LayoutModel.exclude","title":"exclude  <code>class-attribute</code>","text":"<pre><code>exclude = CharField(null=True)\n</code></pre>"},{"location":"developer-guide/api/models/layout/#ogc.models.layout.LayoutModel.extra","title":"extra  <code>class-attribute</code>","text":"<pre><code>extra = JSONField(null=True)\n</code></pre>"},{"location":"developer-guide/api/models/layout/#ogc.models.layout.LayoutModel.include","title":"include  <code>class-attribute</code>","text":"<pre><code>include = CharField(null=True)\n</code></pre>"},{"location":"developer-guide/api/models/layout/#ogc.models.layout.LayoutModel.Meta","title":"Meta","text":""},{"location":"developer-guide/api/models/layout/#ogc.models.layout.LayoutModel.Meta.table_name","title":"table_name  <code>class-attribute</code>","text":"<pre><code>table_name = 'layouts'\n</code></pre>"},{"location":"developer-guide/api/models/machine/","title":"API","text":""},{"location":"developer-guide/api/models/machine/#ogc.models.machine.MachineModel.layout","title":"layout  <code>class-attribute</code>","text":"<pre><code>layout = ForeignKeyField(\nLayoutModel, backref=\"machines\", on_delete=\"CASCADE\"\n)\n</code></pre>"},{"location":"developer-guide/api/models/machine/#ogc.models.machine.MachineModel.instance_name","title":"instance_name  <code>class-attribute</code>","text":"<pre><code>instance_name = CharField()\n</code></pre>"},{"location":"developer-guide/api/models/machine/#ogc.models.machine.MachineModel.instance_id","title":"instance_id  <code>class-attribute</code>","text":"<pre><code>instance_id = CharField()\n</code></pre>"},{"location":"developer-guide/api/models/machine/#ogc.models.machine.MachineModel.instance_state","title":"instance_state  <code>class-attribute</code>","text":"<pre><code>instance_state = CharField()\n</code></pre>"},{"location":"developer-guide/api/models/machine/#ogc.models.machine.MachineModel.public_ip","title":"public_ip  <code>class-attribute</code>","text":"<pre><code>public_ip = CharField()\n</code></pre>"},{"location":"developer-guide/api/models/machine/#ogc.models.machine.MachineModel.private_ip","title":"private_ip  <code>class-attribute</code>","text":"<pre><code>private_ip = CharField()\n</code></pre>"},{"location":"developer-guide/api/models/machine/#ogc.models.machine.MachineModel.created","title":"created  <code>class-attribute</code>","text":"<pre><code>created = DateTimeField(default=datetime.datetime.utcnow())\n</code></pre>"},{"location":"developer-guide/api/models/machine/#ogc.models.machine.MachineModel.extra","title":"extra  <code>class-attribute</code>","text":"<pre><code>extra = JSONField(null=True)\n</code></pre>"},{"location":"developer-guide/api/models/machine/#ogc.models.machine.MachineModel.tainted","title":"tainted  <code>class-attribute</code>","text":"<pre><code>tainted = BooleanField(default=False)\n</code></pre>"},{"location":"developer-guide/api/models/machine/#ogc.models.machine.MachineModel.remote_state_file","title":"remote_state_file  <code>class-attribute</code>","text":"<pre><code>remote_state_file = CharField(null=True)\n</code></pre>"},{"location":"developer-guide/api/models/machine/#ogc.models.machine.MachineModel.Meta","title":"Meta","text":""},{"location":"developer-guide/api/models/machine/#ogc.models.machine.MachineModel.Meta.table_name","title":"table_name  <code>class-attribute</code>","text":"<pre><code>table_name = 'machines'\n</code></pre>"},{"location":"developer-guide/api/models/machine/#ogc.models.machine.MachineModel.state","title":"state","text":"<pre><code>state() -&gt; Node | None\n</code></pre> <p>Returns the store remote state of a node in the cloud</p> Source code in <code>ogc/models/machine.py</code> <pre><code>def state(self) -&gt; Node | None:\n\"\"\"Returns the store remote state of a node in the cloud\"\"\"\nstate_file_p = Path(str(self.remote_state_file))\nif state_file_p.exists():\nout: Node = pickle_to_model(state_file_p.read_bytes())\nreturn out\nreturn None\n</code></pre>"},{"location":"developer-guide/api/models/machine/#ogc.models.machine.MachineModel.ssh","title":"ssh","text":"<pre><code>ssh() -&gt; ParamikoSSHClient | None\n</code></pre> <p>Provides an SSH Client for use with provisioning</p> Source code in <code>ogc/models/machine.py</code> <pre><code>@retry(tries=5, delay=5, jitter=(1, 5), logger=None)\ndef ssh(self) -&gt; ParamikoSSHClient | None:\n\"\"\"Provides an SSH Client for use with provisioning\"\"\"\npriv_key = Path(self.layout.ssh_private_key).expanduser().resolve()\nif self.public_ip and self.layout.username:\n_client = ParamikoSSHClient(\nstr(self.public_ip),\nusername=str(self.layout.username),\nkey=str(priv_key),\ntimeout=300,\nuse_compression=True,\n)\ntry:\n_client.connect()\nexcept paramiko.ssh_exception.SSHException:\nlog.error(\nf\"Authentication failed for: ({self.layout.name}/{priv_key}) {self.layout.username}@{self.public_ip}\"\n)\nreturn None\nreturn _client\nreturn None\n</code></pre>"},{"location":"developer-guide/api/models/tags/","title":"API","text":"<p>Tag Model</p>"},{"location":"developer-guide/api/models/tags/#ogc.models.tags.TagModel.name","title":"name  <code>class-attribute</code>","text":"<pre><code>name = CharField()\n</code></pre>"},{"location":"developer-guide/api/models/tags/#ogc.models.tags.TagModel.description","title":"description  <code>class-attribute</code>","text":"<pre><code>description = CharField(null=True)\n</code></pre>"},{"location":"developer-guide/api/models/tags/#ogc.models.tags.TagModel.extra","title":"extra  <code>class-attribute</code>","text":"<pre><code>extra = JSONField(null=True)\n</code></pre>"},{"location":"developer-guide/api/models/tags/#ogc.models.tags.TagModel.Meta","title":"Meta","text":""},{"location":"developer-guide/api/models/tags/#ogc.models.tags.TagModel.Meta.table_name","title":"table_name  <code>class-attribute</code>","text":"<pre><code>table_name = 'tags'\n</code></pre>"},{"location":"developer-guide/api/models/utils/","title":"API","text":"<p>init</p>"},{"location":"developer-guide/api/models/utils/#ogc.models.utils.get_new_uuid","title":"get_new_uuid","text":"<pre><code>get_new_uuid() -&gt; str\n</code></pre> Source code in <code>ogc/models/utils.py</code> <pre><code>def get_new_uuid() -&gt; str:\nreturn str(uuid.uuid1())\n</code></pre>"},{"location":"developer-guide/api/models/utils/#ogc.models.utils.serialize","title":"serialize","text":"<pre><code>serialize(\ninst: str,\nfield: str,\nvalue: str | datetime.datetime | Path,\n) -&gt; str\n</code></pre> <p>Serializes value into its proper type</p> Source code in <code>ogc/models/utils.py</code> <pre><code>def serialize(inst: str, field: str, value: str | datetime.datetime | Path) -&gt; str:\n\"\"\"Serializes value into its proper type\"\"\"\nif isinstance(value, datetime.datetime):\nreturn value.isoformat()\nif isinstance(value, Path):\nreturn str(value)\nreturn value\n</code></pre>"},{"location":"developer-guide/api/models/utils/#ogc.models.utils.convert_tags_to_slug_tags","title":"convert_tags_to_slug_tags","text":"<pre><code>convert_tags_to_slug_tags(\ntags: list[str] | None,\n) -&gt; list[str] | None\n</code></pre> <p>Converts tags to their slugged equivalent</p> Source code in <code>ogc/models/utils.py</code> <pre><code>def convert_tags_to_slug_tags(tags: list[str] | None) -&gt; list[str] | None:\n\"\"\"Converts tags to their slugged equivalent\"\"\"\nif tags:\nreturn [slugify(tag) for tag in tags]\nreturn None\n</code></pre>"},{"location":"user-guide/defining-layouts/","title":"Defining Layouts","text":"<p>Learn the layout specification and how to create your own provisioning layouts.</p> <p>Create a file <code>ubuntu.py</code>:</p> <pre><code>\"\"\"layout spec\"\"\"\nfrom __future__ import annotations\nfrom ogc.deployer import init\nfrom ogc.fs import expand_path\nfrom ogc.log import get_logger\nlog = get_logger(\"ogc\")\ndeployment = init(\nlayout_model=dict(\ninstance_size=\"e2-standard-4\",\nname=\"ubuntu-ogc\",\nprovider=\"google\",\nremote_path=\"/home/ubuntu/ogc\",\nruns_on=\"ubuntu-2004-lts\",\nscale=9,\nscripts=\"fixtures/ex_deploy_ubuntu\",\nusername=\"ubuntu\",\nssh_private_key=expand_path(\"~/.ssh/id_rsa_libcloud\"),\nssh_public_key=expand_path(\"~/.ssh/id_rsa_libcloud.pub\"),\nports=[\"22:22\", \"80:80\", \"443:443\", \"5601:5601\"],\ntags=[],\nlabels=dict(\ndivision=\"engineering\", org=\"obs\", team=\"observability\", project=\"perf\"\n),\n),\n)\n</code></pre> <p>Each layout has a friendly name associated as seen by <code>ubuntu-ogc</code>. The next section is going to go over each option and describe its meaning.</p> <p>provider</p> <p>Define which cloud the layout will operate in. Currently supported options are aws and google.</p> <p>runs-on</p> <p>Define the base OS image to be deployed on to the nodes. The current supported list of names are:</p> AWS Google ubuntu-2004 ubuntu-2004 ubuntu-1804 ubuntu-1804 ubuntu-1604 ubuntu-1604 sles-15 sles-15 sles-12 sles-12 sles-11 sles-11 debian-10 debian-10 debian-9 debian-9 debian-8 debian-8 rhel-8 rhel-7 rhel-6 <p>instance-size</p> <p>Define the machine size, this is dependent on which provider is chosen. The instance-size correlates with the instance size naming for each cloud. </p> <p>For example, on AWS you would use <code>instance-size = \"c5.4xlarge\"</code> and in Google's case, <code>instance-size = \"e2-standard-4\"</code>.</p> <p>username</p> <p>The ssh user to use when deploying and accessing the nodes. This is also somewhat dependent on which provider is used.</p> <p>In the case of Google, any username can be given. In the case of AWS, the base machines have a pre-loaded user that must be used:</p> AWS Username centos centos debian admin oracle ec2-user sles ec2-user ubuntu ubuntu windows1 ogc <p>Caution</p> <p>A lot of cloud machine images disable <code>root</code> login, try to avoid using that as a user and utilize <code>sudo</code> for anything requiring elevated permissions.</p> <p>scripts</p> <p>The location on your machine where templates/scripts resides. These will be uploaded and executed during the deployment phase.</p> Note <p>See scripting for more information.</p> <p>scale</p> <p>How many nodes of each layout to deploy. This is also referenced during a deployment reconciliation phase.</p> <p>remote-path (optional)</p> <p>If set, any uploads/downloads outside of what's defined in <code>scripts</code> will be placed in that remote path.</p> <p>include (optional)</p> <p>A list of files/wildcards to include in the upload</p> <p>exclude (optional)</p> <p>A list of files/wildcards to exclude in the upload</p> <p>artifacts (optional)</p> <p>The remote path where script execution output is stored. This is used when pulling artifacts with <code>ogc pull-artifacts</code> and also utilized during node teardown. This will download any artifacts found into <code>artifacts/instance-name/</code>.</p> <p>tags (optional)</p> <p>Define tags for each layout, allows additional filtering capabilities and deployment options when used with <code>ogc ls</code> and <code>ogc exec</code></p> <p>ports (optional)</p> <p>Define what ingress ports are available when accessing the node.</p> <ol> <li> <p>This is the default user for our contributed packer build for Windows \u21a9</p> </li> </ol>"},{"location":"user-guide/managing-nodes/","title":"Managing a Deployment","text":"<p>Learn how to list, inspect, access and debug your node deployments.</p> Assumptions <p>This assumes you've created a layout in a file named <code>ubuntu.py</code> and you have <code>.env</code> plus Google Authentication completed.</p>"},{"location":"user-guide/managing-nodes/#listing-nodes","title":"Listing Nodes","text":"<p>To list nodes in your deployment, run the following:</p> bash -c<pre><code>docker run \\\n--env-file .env \\\n--rm \\\n--volumes-from gcloud-config \\\n-v ssh-creds:/root/.ssh \\\n-v `pwd`:`pwd` \\\n-w `pwd` \\\n-it gorambo/ogc:v4 \\\nogc ubuntu.py ls -v\n</code></pre> <p>Which gives a table output of current node deployments:</p> <p></p>"},{"location":"user-guide/managing-nodes/#accessing-nodes","title":"Accessing nodes","text":"<p>OGC provides a helper command for easily accessing any of the nodes in your deployment.</p> <p>To login to a node run:</p> bash -c<pre><code>docker run \\\n--env-file .env \\\n--rm \\\n--volumes-from gcloud-config \\\n-v ssh-creds:/root/.ssh \\\n-v `pwd`:`pwd` \\\n-w `pwd` \\\n-it gorambo/ogc:v4 \\\nogc ubuntu.py ssh -v -o instance_id=123432432\n</code></pre> <p>Or</p> bash -c<pre><code>docker run \\\n--env-file .env \\\n--rm \\\n--volumes-from gcloud-config \\\n-v ssh-creds:/root/.ssh \\\n-v `pwd`:`pwd` \\\n-w `pwd` \\\n-it gorambo/ogc:v4 \\\nogc ubuntu.py ssh -v -o instance_name=ogc-ubuntu-001\n</code></pre>"},{"location":"user-guide/managing-nodes/#executing-commands","title":"Executing commands","text":"<p>Running arbitrary commands can be accomplished with:</p> bash -c<pre><code>docker run \\\n--env-file .env \\\n--rm \\\n--volumes-from gcloud-config \\\n-v ssh-creds:/root/.ssh \\\n-v `pwd`:`pwd` \\\n-w `pwd` \\\n-it gorambo/ogc:v4 \\\nogc ubuntu.py exec -v -o cmd='ls -l /\n</code></pre>"},{"location":"user-guide/managing-nodes/#executing-a-scripts-directory","title":"Executing a scripts directory","text":"<p>In addition to running arbitrary commands, OGC can also execute a directory of templates/scripts:</p> bash -c<pre><code>docker run \\\n--env-file .env \\\n--rm \\\n--volumes-from gcloud-config \\\n-v ssh-creds:/root/.ssh \\\n-v `pwd`:`pwd` \\\n-w `pwd` \\\n-it gorambo/ogc:v4 \\\nogc ubuntu.py exec_scripts -v -o scripts=fixtures/ex_deploy_ubuntu\n</code></pre> <p>This can be useful to re-run a deployment or add new functionality/one-offs to a node without disturbing the original layout specifications. Access to the database and all templating is available as well.</p>"},{"location":"user-guide/managing-nodes/#destroying-nodes","title":"Destroying nodes","text":"<p>OGC allows destroying of individual or a full blown cleanup. To remove a single node we run:</p> bash -c<pre><code>docker run \\\n--env-file .env \\\n--rm \\\n--volumes-from gcloud-config \\\n-v ssh-creds:/root/.ssh \\\n-v `pwd`:`pwd` \\\n-w `pwd` \\\n-it gorambo/ogc:v4 \\\nogc ubuntu.py down -v -o instance_name=ogc-ubuntu-001\n</code></pre>"},{"location":"user-guide/providers/","title":"Providers","text":"<p>In order to access a cloud provider, there are certain environment variables that need to be exposed for each. Each environment variable should be defined in <code>.env</code> file so it will be automatically loaded when running OGC.</p>"},{"location":"user-guide/providers/#aws","title":"AWS","text":"<ul> <li>AWS_ACCESS_KEY_ID</li> <li>AWS_SECRET_ACCESS_KEY</li> <li>AWS_REGION</li> </ul>"},{"location":"user-guide/providers/#google","title":"Google","text":"<ul> <li>GOOGLE_APPLICATION_CREDENTIALS</li> <li>GOOGLE_APPLICATION_SERVICE_ACCOUNT</li> <li>GOOGLE_PROJECT</li> <li>GOOGLE_DATACENTER</li> </ul>"},{"location":"user-guide/providers/#authentication-and-docker","title":"Authentication and Docker","text":"<p>Using <code>OGC</code> via docker is the easiest way to get started, please see this documentation on how to setup authentication with GCE/OGC/Docker.</p>"},{"location":"user-guide/scripting/","title":"Scripting","text":"<p>All deployments have the ability to execute scripts once a node becomes available.</p>"},{"location":"user-guide/scripting/#before-starting","title":"Before starting","text":"<p>A couple of things to keep in mind:</p> <ul> <li>All scripts are executed in order based on the filenames. It is recommended to create scripts with a numbered prefix, for example:</li> </ul> <pre><code>- scripts/\n  -  01-install-deps\n  -  02-configure-services\n</code></pre> <ul> <li>There is a special reserved filename <code>teardown</code>, if this file exists it will only be executed during a removal of a node. This is useful for any cleanup actions that may need to be run, such as removing test users, un-enrolling from a service, etc.</li> </ul>"},{"location":"user-guide/scripting/#writing-scripts","title":"Writing scripts","text":"<p>Scripts can be written in any language, it is up to you to configure the nodes so that any runtimes and library dependencies are met on the target node for your script to execute in. </p> <p>One way to accomplish this is to create <code>01-setup-env</code> bash script:</p> <pre><code>#!/bin/bash\necho \"Installing python3 on ubuntu\"\nsudo apt-get update\nsudo apt-get install -qyf python3\nsudo pip install sh\n</code></pre> <p>Then in subsequent scripts, using python3 is available. For example, in file <code>02-run-cmd-in-python</code>:</p> <pre><code>#!/usr/bin/env python3\nimport sh\nsh.ls('/')\nsh.cp('-a', 'mydir', 'anotherdir')\n</code></pre>"},{"location":"user-guide/scripting/#templating","title":"Templating","text":"<p>OGC provides some additional capabilities through templating. Under the hood python-mako is used for the parsing.</p> <p>With templating, you have the ability to query the underlying database to gather node information, a couple of modules are already exposed in the templates context:</p> Var Description nodes Nodes available node Current deployed node metadata env Environment variables are made available through this key, <code>env['USER']</code> <pre><code>#!/bin/bash\n&lt;%! from ogc.templatetags import run, header, hr %&gt;\n\n&lt;%namespace name=\"utils\" file=\"/functions.mako\"/&gt;\n\n${header('Connection information')}\necho \"id: ${node.instance_id}\"\necho \"name: ${node.instance_name}\"\necho \"connection: ${node.layout.username}@${node.public_ip}\"\necho \"provider ${node.layout.provider}\"\n${hr()}\n${run('ls', '/', l=True, h=True)}\n${header('All nodes')}\n% for obj in nodes:\necho \"id: ${obj.instance_id}\"\necho \"name: ${obj.instance_name}\"\necho \"connection: ${obj.layout.username}@${obj.public_ip}\"\necho \"provider ${obj.layout.provider}\"\n% endfor\n${header('All nodes finished')}\n${run('mkdir', node.layout.remote_path + \"/output\", p=True)} &amp;&amp; \\\n${run('touch', node.layout.remote_path + \"/output/test.xml\")}\n</code></pre> <p>The runtime environment is also available within the template context.</p> <p>About Environment Variables</p> <p>Any environment variables exported within OGC will be exposed in the templates.</p>"},{"location":"user-guide/scripting/#reusable-helpers","title":"Reusable helpers","text":"<p>In the above example we reference a file called <code>/functions.mako</code> this is just another template file that sits just outside of our defined <code>scripts</code>, for example, if our <code>scripts</code> is defined to be in <code>scripts/my_ubuntu_deploy</code> then this <code>functions.mako</code> will live at <code>scripts/functions.mako</code>. </p> <p>Good Practice</p> <p>This is good practice as you may have multiple layouts with different script directories for each and would like to store common functionality in a single place.</p> <p>Defining helper functions is straight forward, lets look at <code>functions.mako</code> for an example:</p> <pre><code>## Helper template functions downloading/extracting files\n&lt;%def name=\"setup_env()\"&gt;\nif ! test -f \"/usr/local/bin/pacapt\"; then\nwget -O /usr/local/bin/pacapt https://github.com/icy/pacapt/raw/ng/pacapt\n    chmod 755 /usr/local/bin/pacapt\n    ln -sv /usr/local/bin/pacapt /usr/local/bin/pacman || true\nfi\n&lt;/%def&gt;\n\n&lt;%def name=\"install_pkgs(pkgs)\"&gt;\n% for pkg in pkgs:\npacapt install --noconfirm ${pkg}\n% endfor\n&lt;/%def&gt;\n\n&lt;%def name=\"download(url, src_file)\"&gt;\nwget -O ${src_file} ${url}\n&lt;/%def&gt;\n\n&lt;%def name=\"extract(src, dst=None)\"&gt;\n% if dst:\nmkdir -p ${dst}\ntar -xvf ${src} -C ${dst}\n% else:\ntar -xvf ${src}\n% endif\n&lt;/%def&gt;\n</code></pre> <p>Each <code>%def</code> section defines a function block that when called with any necessary arguments will output that data into the scripts with all necessary translations handled.</p> <p>You can see the usage of these functions in the previous example for installing elastic-agent.</p> <p>It is worth the time to visit Mako's website and learn about its feature set, particularly namespaces and defs and blocks.</p>"},{"location":"user-guide/windows/","title":"Windows","text":"<p>OGC supports provisioning Windows instances, however, it does make a couple of assumptions:</p> <ul> <li>OpenSSH Server is running on the Windows Machine</li> <li>Rsync is installed and available</li> <li>Passwordless ssh is setup</li> </ul> <p>Fortunately, we provide you with a Packer setup that will let you  quickly build an AWS AMI to meet those requirements.</p> <p>Warning</p> <p>If using OGC contributed packer build, only AWS is supported at this time.</p>"},{"location":"user-guide/windows/#build-ami","title":"Build AMI","text":"<p>The configurations are located in contrib/, to get started run:</p> <pre><code>$ git clone https://github.com/adam-stokes/ogc\n$ cd ogc/contrib\n</code></pre> <p>Alert</p> <p>If using these Packer configs, please note the default user to use is: <code>ogc</code></p>"},{"location":"user-guide/windows/#windows-2019","title":"Windows 2019","text":"<p>To build a Windows 2019 Server instance run:</p> <pre><code>ogc/contrib&gt; $ packer build windows2019.json\n</code></pre> <p>Once complete, grab the AMI ID, as this will be used in the <code>layout</code> specification of OGC.</p>"},{"location":"user-guide/windows/#usage","title":"Usage","text":"<p>To provision and deploy a Windows machine, the following example spec will work:</p> <p>Create a file <code>windows.py</code>:</p> <pre><code>from ogc.deployer import init\nfrom ogc.log import get_logger\nfrom ogc.fs import expand_path\nlog = get_logger(\"ogc\")\ndeployment = init(\nlayout_model=dict(\ninstance_size=\"c5.2xlarge\",\nname=\"ubuntu-ogc\",\nprovider=\"aws\",\nremote_path=\"ogc-src\",\nruns_on=\"ami-0587bd602f1da2f1d\",\nscale=1,\nscripts=\"fixtures/ex_deploy_windows\",\nusername=\"ogc\",\nssh_private_key=expand_path(\"~/.ssh/id_rsa_libcloud\"),\nssh_public_key=expand_path(\"~/.ssh/id_rsa_libcloud.pub\"),\nports=[\"22:22\", \"80:80\", \"443:443\", \"5601:5601\"],\ntags=[],\nlabels=dict(\ndivision=\"engineering\", org=\"obs\", team=\"observability\", project=\"perf\"\n),\n),\n)\n</code></pre> <p>Once defined, simply running:</p> <pre><code>$ ogc windows up -v\n</code></pre> <p>Will get you a provisioned Windows machine!</p>"},{"location":"user-guide/windows/#scripting","title":"Scripting","text":"<p>Powershell a good choice, works out of the box on Windows, however, if you want to use a different programming  language the choice is yours. All the templating, database, and context is available.</p> <p>For example, to print out the current node information, edit a file <code>01-powershell</code>:</p> <pre><code>powershell echo \"${node.instance_name}:${node.public_ip}\" &gt; ${node.instance_name}.txt\n</code></pre> <p>This is a simple example, for a more advanced deployment it may be best to create  your <code>ps1</code> files and then reference them through powershell interpreter.</p>"},{"location":"user-guide/configuration/docker/gcloud-auth/","title":"Google Cloud authentication and Docker","text":"<p>Using a separate container for storing the Google cloud credentials we can easily target certain commands to run with that authentication in place.</p>"},{"location":"user-guide/configuration/docker/gcloud-auth/#create-container","title":"Create Container","text":"<p>First, create the <code>gcloud-config</code> container:</p> <pre><code>docker run -ti --name gcloud-config google/cloud-sdk gcloud auth login\n</code></pre> <p>This will store your credentials in the gcloud-config container volume.</p>"},{"location":"user-guide/configuration/docker/gcloud-auth/#setup-authentication-and-environment","title":"Setup authentication and environment","text":"<p>Download a service account credentials file from Google and setup the <code>.env</code> in your project root:</p> <pre><code>GOOGLE_APPLICATION_CREDENTIALS=my-google-service-creds.json\nGOOGLE_APPLICATION_SERVICE_ACCOUNT=my-google@**.iam.gserviceaccount.com\nGOOGLE_PROJECT=my-project\nGOOGLE_DATACENTER=us-central1-a\n</code></pre>"},{"location":"user-guide/configuration/docker/gcloud-auth/#attach-container-to-ogc","title":"Attach container to OGC","text":"<p>Next, to use that with OGC, run:</p> bash -c<pre><code>docker run \\\n--env-file .env \\\n--rm \\\n--volumes-from gcloud-config \\\n-v ssh-creds:/root/.ssh \\\n-v `pwd`:`pwd` \\\n-w `pwd` \\\n-it gorambo/ogc:v4 \\\nogc ubuntu.py up -v\n</code></pre>"},{"location":"user-guide/configuration/docker/ssh/","title":"Docker and SSH","text":"<p>There's a couple of ways to handle this, the first way is to mount the ssh credentials defined in your layout to be accessible within the OGC container.</p>"},{"location":"user-guide/configuration/docker/ssh/#create-a-shared-data-volume","title":"Create a shared data volume","text":"<p>May be best to create a shared local data volume in docker with all the ssh keys that could be used for deployment.</p>"},{"location":"user-guide/configuration/docker/ssh/#create-shared-volume","title":"Create shared volume","text":"<p>Create a shared volume called <code>ssh-creds</code></p> <pre><code>docker volume create ssh-creds\n</code></pre>"},{"location":"user-guide/configuration/docker/ssh/#generate-ssh-keys","title":"Generate SSH Keys","text":"<pre><code>docker run -ti --rm -v ssh-creds:/ssh ubuntu\nubuntu-docker&gt; apt-get update &amp;&amp; apt-get install -qyf openssh-client\nubuntu-docker&gt; ssh-keygen -t ed25519 -C youremail.com\n</code></pre> <p>When prompted, store your credentials in <code>/ssh/id_ed25519</code></p>"},{"location":"user-guide/configuration/docker/ssh/#run-with-new-keys","title":"Run with new keys","text":"<p>Once complete, you can mount that shared volume going forward to have access to your ssh keys in the ogc executed container.</p> <pre><code>docker run --env-file .env \\\n--rm \\\n--volumes-from gcloud-config \\\n-v ssh-creds:/root/.ssh \\\n-v `pwd`:`pwd` -w `pwd` \\\n-it ogc:v4 \\\nogc ubuntu.py up -v\n</code></pre> <p>Your example layout would look like:</p> ubuntu.py<pre><code>from ogc import init, fs\ndeployment = init(\nlayout_model=dict(\ninstance_size=\"e2-standard-4\",\nname=\"ubuntu-ogc\",\nprovider=\"google\",\nremote_path=\"/home/ubuntu/ogc\",\nruns_on=\"ubuntu-2004-lts\",\nscale=1,\nscripts=\"fixtures/ex_deploy_ubuntu\",\nusername=\"ubuntu\",\nssh_private_key=fs.expand_path(\"~/ssh/id_ed25519\"),\nssh_public_key=fs.expand_path(\"~/ssh/id_ed25519.pub\"),\nports=[\"22:22\", \"80:80\", \"443:443\", \"5601:5601\"],\ntags=[],\nlabels=dict(\ndivision=\"engineering\", org=\"obs\", team=\"observability\", project=\"perf\"\n),\n),\n)\n</code></pre> <p>This DigitalOcean article is good for learning how to share volumes across containers.</p>"},{"location":"user-guide/configuration/docker/ssh/#bind-mount-ssh-keys","title":"Bind mount ssh keys","text":"<p>Here we are telling docker to make sure our ssh keys are accessible within the containers <code>/root/.ssh</code> path.</p> ubuntu.py<pre><code>from ogc import init, fs\ndeployment = init(\nlayout_model=dict(\ninstance_size=\"e2-standard-4\",\nname=\"ubuntu-ogc\",\nprovider=\"google\",\nremote_path=\"/home/ubuntu/ogc\",\nruns_on=\"ubuntu-2004-lts\",\nscale=1,\nscripts=\"fixtures/ex_deploy_ubuntu\",\nusername=\"ubuntu\",\nssh_private_key=fs.expand_path(\"~/.ssh/id_rsa_libcloud\"),\nssh_public_key=fs.expand_path(\"~/.ssh/id_rsa_libcloud.pub\"),\nports=[\"22:22\", \"80:80\", \"443:443\", \"5601:5601\"],\ntags=[],\nlabels=dict(\ndivision=\"engineering\", org=\"obs\", team=\"observability\", project=\"perf\"\n),\n),\n)\n</code></pre> <p>Since our SSH key's will not be copied in by default we'll need to tell docker how to access it:</p> <pre><code>docker run --rm -ti \\\n-v ~/.ssh/id_rsa_libcloud:/root/.ssh/id_rsa_libcloud \\\n-v ~/.ssh/id_rsa_libcloud.pub:/root/.ssh/id_rsa_libcloud.pub \\\n-v `pwd`:`pwd` \\\n-w `pwd` gorambo/ogc:v4 \\\nogc ubuntu.py up -v\n</code></pre>"},{"location":"user-guide/configuration/docker/ssh/#place-keys-in-working-directory","title":"Place keys in working directory","text":"<p>Another simple solution is to create a ssh passwordless keypair and place it directly in your project directory. This will allow docker to copy those keys into the container during execution and made available to OGC.</p> ubuntu.py<pre><code>from ogc import init, fs\ndeployment = init(\nlayout_model=dict(\ninstance_size=\"e2-standard-4\",\nname=\"ubuntu-ogc\",\nprovider=\"google\",\nremote_path=\"/home/ubuntu/ogc\",\nruns_on=\"ubuntu-2004-lts\",\nscale=1,\nscripts=\"fixtures/ex_deploy_ubuntu\",\nusername=\"ubuntu\",\nssh_private_key=fs.expand_path(\"fixtures/id_rsa_libcloud\"),\nssh_public_key=fs.expand_path(\"fixtures/id_rsa_libcloud.pub\"),\nports=[\"22:22\", \"80:80\", \"443:443\", \"5601:5601\"],\ntags=[],\nlabels=dict(\ndivision=\"engineering\", org=\"obs\", team=\"observability\", project=\"perf\"\n),\n),\n)\n</code></pre> <p>In the above example, the ssh keys are now stored in <code>&lt;pwd&gt;/fixtures</code>. Now running our docker container can be accomplished as follows:</p> bash -c<pre><code>docker run \\\n--env-file .env \\\n--rm \\\n-v ssh-creds:/root/.ssh \\\n-v `pwd`:`pwd` \\\n-w `pwd` \\\n-it gorambo/ogc:v4 \\\nogc ubuntu.py up -v\n</code></pre> Caution <p>If you keep your project in a git repo please make sure to add your ssh keys to <code>.gitignore</code></p>"},{"location":"user-guide/cookbook/template-access-node-info/","title":"Accessing node information","text":""},{"location":"user-guide/cookbook/template-access-node-info/#current-node","title":"Current node","text":"<p>In template files you have access to the node that is currently being rendered prior to those scripts being uploaded.</p> <p>Below is an example of querying the current node's information and outputting it to a file:</p> <pre><code>#!/bin/bash\necho \"### CURRENT NODE\" &gt;&gt; node_info.txt\necho \"[ID: ${node.id}] Name: ${node.instance_name} || Connection: ${node.username}@${node.public_ip} || Provider: ${node.provider}\" &gt;&gt; node_info.txt\necho \"### CURRENT NODE\" &gt;&gt; node_info.txt\n</code></pre> <p>Save this file in the location of your defined <code>scripts</code> and give it a indexed name of where in the order it should be executed, for example, <code>01-show-node-info</code>1.</p>"},{"location":"user-guide/cookbook/template-access-node-info/#all-nodes","title":"All nodes","text":"<p>In some cases you may need to grab information from another node in the deployment, for example, a second node running Kibana in which the first node needs to perform some kind of API calls against it. </p> <p>We can accomplish this using the <code>db</code> and modules that's exposed in our templates. Create a file <code>02-curl-remote</code> with the following:</p> <pre><code>#!/bin/bash\nsudo pip install httpie\nKIBANA_HOST=${node.instance_name.contains([\"kibana\"]).first() or '')}\nhttp -a username:passsword -f GET https://$KIBANA_HOST:5601/fleet/setup kbn-xsrf:ogc\n</code></pre> <ol> <li> <p>See the Scripting documentation for ordering of files.\u00a0\u21a9</p> </li> </ol>"}]}